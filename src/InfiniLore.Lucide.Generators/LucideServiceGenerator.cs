// ---------------------------------------------------------------------------------------------------------------------
// Imports
// ---------------------------------------------------------------------------------------------------------------------
using CodeOfChaos.GeneratorTools;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;
using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;

namespace InfiniLore.Lucide.Generators;
// ---------------------------------------------------------------------------------------------------------------------
// Code
// ---------------------------------------------------------------------------------------------------------------------
[Generator]
public class LucideServiceGenerator : IIncrementalGenerator {
    private static readonly System.Text.RegularExpressions.Regex MyRegex = new("<LucideSvg[^>]*\\sIconName=\"([^\"]+)\"", RegexOptions.Compiled | RegexOptions.Multiline);

    public void Initialize(IncrementalGeneratorInitializationContext context) {
        // Get all Razor files in the compilation
        IncrementalValuesProvider<AdditionalText> razorFiles = context.AdditionalTextsProvider
            .Where(file => file.Path.EndsWith(".razor"));

        // Generate a dictionary of extracted name fields
        IncrementalValueProvider<ImmutableArray<List<string>>> lucideIconNames = razorFiles
            .Select((file, ct) => {
                string content = file.GetText(ct)?.ToString() ?? string.Empty;
                return ExtractNames(content);
            })
            .Collect();// Aggregate results

        // Proceed to generate output code
        context.RegisterSourceOutput(lucideIconNames, GenerateCode);
    }

    // ReSharper disable once LoopCanBeConvertedToQuery
    private static List<string> ExtractNames(string content) {
        MatchCollection matches = MyRegex.Matches(content);
        var names = new List<string>();
        foreach (Match match in matches) {
            if (match.Groups.Count <= 1) continue;
            names.Add(match.Groups[1].Value);
        }
        return names;
    }


    private void GenerateCode(SourceProductionContext context, ImmutableArray<List<string>> lucideIconNames) {
        // Flatten the list of names and remove duplicates
        List<string> uniqueNames = lucideIconNames
            .SelectMany(x => x)
            .Distinct()
            .ToList();

        // Write out the dictionary as C# code
        var sb = new GeneratorStringBuilder();
        
        sb.AppendLine("// This file was generated by the LucideServiceGenerator");
        sb.AppendLine($"// {lucideIconNames.Length}");
        
        sb.AppendLine("using System.Collections.Generic;");
        sb.AppendLine();
        sb.AppendLine("namespace GeneratedNamespace");
        sb.AppendLine("{");
        sb.AppendLine("    public static class LucideSvgIcons");
        sb.AppendLine("    {");
        sb.AppendLine("        public static readonly Dictionary<string, string> Icons = new()");
        sb.AppendLine("        {");

        foreach (string name in uniqueNames) {
            // The value could be changed if you want to store additional metadata
            sb.AppendLine($"            {{ \"{name}\", \"{name}\" }},");
        }

        sb.AppendLine("        };");
        sb.AppendLine("    }");
        sb.AppendLine("}");

        // Add the generated source to the compilation
        context.AddSource("LucideSvgIcons.g.cs", SourceText.From(sb.ToString(), Encoding.UTF8));
    }
}
